"""Pytest dna tests

Description.

Usage Example:
    example...
"""
# Third Party Packages
import pytest
# Local Modules
from models import Nucleotide


# FIXTURES --------------------------------------------------------------------
@pytest.fixture
def mrna():
    """Return GFP mRNA object"""
    from models import RNA
    fixture_return = RNA(
        name='GFP (M62654.1)',
        sequence=(
            'AAGCUUCAAAUUAAGUCAGCUCCUUAAAUGAAAGAUAAUAAAGUGUAGUUCAAGAACUAUAUGAA'
            'UGAUGUGUUUUCAGAUAACCAAAAUGGGGAAAAACAUGCUAAAGUCAGCAUAUUUUUGGAAAAUU'
            'GAUGACGUCAUCAUGACGUCGUUUUGAUGACAAAACUUAUUAUAAGCGAAUUCUUAUAUUUUUAC'
            'AGGAUAACAAAGAUGAGUAAAGGAGAAGAACUUUUCACUGGAGUUGUCCCAAUUCUUGUUGAAUU'
            'AGAUGGUGAUGUUAAUGGGCACAAAUUCUCUGUCAGUGGAGAGGGUGAAGGUGAUGCAACAUACG'
            'GAAAACUUACCCUUAAAUUUAUUUGCACUACUGGAAAGCUACCUGUUCCAUGGCCAACACUUGUC'
            'ACUACUUUCUCUUAUGGUGUUCAGUAAGUGCAUUUUAUACUCUUUUAAUAUCAGUGUUAAGAAAA'
            'UCAAGUGUCUUGCUAUUUUUUCGAUUAUUGGUGCAAUUCUAGUCAAAUUAUUGCGUUUUUUUACC'
            'CAAAAUGUUAAUGUAAAACUGAAAUUUGGCACACUUGCGCAAAUAUAUACAGGGUAUUUUGAAAA'
            'AAUUAAACAGGAUGAUAAAAGUUGCACAGAAACUUAUCUCAAGAUUUACCCGCAGAAAGAUGCUU'
            'NAAAAAUUGAUAUUUGACAGAGCAAAACCUGAGAUUCACGUCUUUUAGUUGUUUGACUUGAAAUU'
            'UUGGUGACAGGUAGGUAUCAUGAAAAACAAACAAAACGUAAAAAUAUCACGUGAUUAAAGUGUAU'
            'CUUACAGACCAGAAACAGUUUUAUUAACUUCUAUUAUUCUAUUUUGCAAUAUACACAUUGUAUCA'
            'AUUUCUUGAGUUACUCGAAGUAAUACCGACCUAUCAUCAGAAUUUCAAGUCAACACAACAUUAUA'
            'UGGGGCUGAUUAGGGAAUGAUUUUGUCUCUUUUAGAUGCUUUUCAAGAUACCCAGAUCAUAUGAA'
            'ACAGCAUGACUUUUUCAAGAGUGCCAUGCCCGAAGGUUAUGUACAGGAAAGAACUAUAUUUUACA'
            'AAGAUGACGGGAACUACAAAUCACGUGCUGAAGUCAAGUUUGAAGGUGAUACCCUCGUUAAUAGA'
            'AUUGAGUUAAAAGGUAUUGAUUUUAAAGAAGAUGGAAACAUUCUUGGACACAAAAUGGAAUACAA'
            'CUAUAACUCACACAAUGUAUACAUCAUGGCAGACAAACAAAAGAAUGGAAUCAAAGUUAACUUCA'
            'AAAUUGUAUGUAUACGUUAAGGGCAUAAAUUUUUGCGGGCAUAAAAUCUUGCGAAAUUUAUUAUC'
            'GCGAAUAGGUUACGCAAAAUCUAUAAUUAAAAUGUAUUUUUUUCUGCUGAUUUUCUAAAUAACAA'
            'CUCAACCCGUCAUUUUUAUAUCGCAAAAAUAAAUUCCGAAAUAAUUUAUGCUCGCAAAAAUUUAG'
            'GCCCAUAAGUAGACUUUUGAUAUCUGCGUGCUCUGCAAUGAAGUAAAAAUACGAUAUUUUCAUUG'
            'AAAUACACGGGUUCAAAGUUAUUUGUUAAUUCAAUAAGCGUGCGCAGAAAUUAAAGGACGUAUAA'
            'AGAUACGAACACAUCAAACCAUUCAUGCGUAAAUAAUGUUCUAUUUUUAAAAUUCACCAAAGCUU'
            'AAAUAUUCUUAAGAAUUAUUCAUGUGCCAUGGGAGCAACAAUAUAGUUAUGGACAAAAAUUUCUG'
            'AGUUCACUUUUAUUUCUGCGCGCCCGCAUCAAAGUUCAAACAACUGUGAACCCGAGUUUUUUCCA'
            'GCUUGCAAUUUUAAUAAGAGACAAAAAGCAAAUUGCAGUUCAAGAAAAUCGAGAUAUUGCCAGAU'
            'GUAAACAUUUAAUAAGAGACAAAAAGUUCAUAAGCGUUCUAAAGAACAGCAACAAAAUAAUAAUU'
            'AGAAUUAAACGAGUUCUCAAACAAAAUAAAAACUGAAGUCAAAGAGUCAGUAAGGAAUUUAGUUA'
            'ACGAUGCUUUAUAAUCAAAGUUUUAAUUCCAGUUCAUGUAUGCAAUUAACAAUAAGAUCUUGGAG'
            'AAUUGAAUAUGUUUCGAAAUUUUAUAAAUUCGGAUUUAAUUUCUAAAGUUGUGUAUCAAAAAUAG'
            'UUCAAACUAUUUUCAUGAAAAGAUGAUAAAUUACGGUAAUAAGUAUAUAAUAUAAUCAAUUAAAA'
            'UUAAUUUUAGGCUCAAAUUACAGAAUCCACGUUUUUUUUCUCUAGACAUAGCACAGUGUUUAGAU'
            'GUUUGUUUUAUUUCAUCCAUCCUUAUUACAGUUUUCCUCUGAACUUUAAUACUAGCGUACAAUUU'
            'GAAUAAUAAUCUGAAAUGAUUCAACUUUUCAGAGACACAACAUUGAAGAUGGAAGCGUUCAACUA'
            'GCAGACCAUUAUCAACAAAAUACUCCAAUUGGCGAUGGCCCUGUCCUUUUACCAGACAACCAUUA'
            'CCUGUCCACACAAUCUGCCCUUUCCAAAGAUCCCAACGAAAAGAGAGAUCACAUGAUCCUUCUUG'
            'AGUUUGUAACAGCUGCUGGGAUUACACAUGGCAUGGAUGAACUAUACAAAUAAAUGUCCAGACUU'
            'CCAAUUGACACUAAAGUGUCCGAACAAUUACUAAAAUCUCAGGGUUCCUGGUUAAAUUCAGGCUG'
            'AGAUAUUAUUUAUAUAUUUAUAGAUUCAUUAAAAUUUUAUGAAUAAUUUAUUGAUGUUAUUAAUA'
            'GGGGUUAUUUUCUUAUUAAAUAGGCUACUGGAGUGCAUUCCUAAUUCUAUAUUAAUUACAAUUUG'
            'AUUUGACUUGCUCAGAAUCCCGCUUCAUUGCUUUUCCACUUGCAUUAUCCUUAUUUAGUAUUAAU'
            'UUGUAUUUUGGUUUGGCUACAUUGAGUGCAAAAAACCUAAUUUUCGGACGAAUUUUCGAACGAAU'
            'UUUUUUGACGGAAUUUUCUUCAUUCUAUUUACUCCUCUAGCUAAAUUAUUUUACCUUUUUGUUAA'
            'UUUGGUUAAAUUAUUCUCUGAGCCGAUGAUUGAGAAAUUAAUGGAUUAAAAGUGAGUACCUUACA'
            'UGUUGUCAACUUGUAACGAAUGGAAAAAGAAAUUACGUUUCAAGAGUUUGAAAGGUAAUACAGUU'
            'ACAGUUAACCGCAGAAAAAUUGCAUGAUGAUUGAUAAAUUCGAUUUUUGUUAUCCUAAAAUUUUC'
            'CAAACGUCAGUGGCCGACGACUUUAUCAGGGACUUCUAAAAGUGAAAAAUAAUCAGGUGCGGAUU'
            'UCGAAGGCGCAAAACUAUAGGAAGAGAGCGAAAUGUCAUUAAAUUAUCAUAUUCUAUUAACUGAU'
            'GACAAUAGAUGAUGAAAAGUUUAUGAUUAUUCACUCUCCUCCUGUAAUUAUGCGACCCUUCUAGA'
            'UUCACGCCUGAAAGUAUAGCUACCUGGGAUGAAGUACUAGUCUGAGGACUCUUCACCUAAAAAUU'
            'AAAUUCUUAUAAGAGUAAACAAGAAACUUAGCAGUUACAAACGGGAGAGCGAUGAGAAACAAAAA'
            'CAAUUACGUUGCCACUAUGAAUAUCGAUGUUCAAUCAAUUUUGUUCCUUACUUAUAAGAACGAGA'
            'UCGUCUUAACUUAAAAUAGUAAAAUGUUAUCAAGAUAAUAGCAAUUUUUUACCGACACAGCGAAG'
            'ACUCACUACUGAAAUGAUCAGUUUUAAUCAGGCAAAUAAUCCGUGGCACAUAAUAGUGACCGAAA'
            'AUAAUUAAUCGGCAUUAAGACUACCGAAAUAAUAAUGUUUUUUCUACUGCGUAUACGCGUGAGAA'
            'AUUUUCAAUAAGCUCAUCAUCUUCAGCAUAGUUAUACUUUUAUGUAAAGUAUCAAUUCCGACAUA'
            'AAAUAACGGCUUAUUAUCGAAAUAAUAGCGUUUUCUCUACUCCAUGCGCGUCAAAAGUUCUCUCU'
            'AGGCUCAUCAUCUUCAGCAUAAUUAUAAUUUUUGUAAAGUACCAGUUCCGGUCGAAAAUAAUGAC'
            'UAAUUACCGAAAUUAUAGUGUUUUUCUAUUGCCAUGCGCGUGAAAAAUUUUGAUUGAAUCAUCAU'
            'CUUCAGCAUAGGCAUAAUUCUUUGUAAAAUAUCGAUUCCGACAUAAAAUAAUGGCCUAUUACCGA'
            'AAUAAUCGCGUUUUUCCUACUGCGCAUGCGCGUCAAAAAUUAUAUUUUUAUUCAUCAUCUUCAGC'
            'AUAAUUAUAUUUUUUUGUAAAGUACCAGUUCCGGUAGAAAAUAAUGACUUGUUACUGAAAUAAUA'
            'GCGUUUUUCUAUUGCGCAUGCGCUAUAAAAAUUAAAGUAACGUCAUCAUAUUCAGCAUGGUAUUG'
            'AAAUUUUCAAAUUUAAUUAACCUAUUGAACAAGAAUGUACACUUGCAUCAAAAUAGGUGAAAUUC'
            'GCCAAUAUCGCUAAAUGUGACGCGCGGGAGCAAUACUACGCAUGUAGCUUCAGGUAAAGCAUGUA'
            'GAAACUCGGAGGAGUAGGAGUCCACCGUCGAAACUAAAACGGGAUACACUACGCUAUGGCCUUCG'
            'CUCUCCCGUAAAAAGGGACUAACAAUACGACCUAAUUGAAAUACUAAAAAAAACAAGAGAAAUUU'
            'AACCCCUUUGUUAACACUUUUCAAAAGUGGGAUUUUUUAGCCAACCAUCUGGUAUAUAUGGUUGC'
            'UCAUUUUAUUAUUAUCUCUUUCUUUAUUGUUGGUACAACGUAGUCAAAAUACAAAUUAGGUUAAU'
            'AAAAAGCAACAUUAUAAUGUAUAAAAUCUAAUUGUGUCUAAUUACCGACAAAUUUUACAGGAACA'
            'GUUUUCACCAGACCGAGUCUUAAUUUUAGUUUUAAAAGAAAUUAUGUUUCUACUGUUCUGACAAU'
            'CUGAAGACAAUUAGUUCUAGUGUAACAAU''GCUCUGAAUUGAAUAUAUUCAGCAAUAUUUUGUU'
            'UGUAAGAAUUGGAUGAAUGUACGAACCUUCAGCAGAUUUAUACCAAGUGUUAGAUUUAACAAGAU'
            'UUGCAAGCUGAUGAGUUUCGAGAAAAUUCAACAUAUCUGGAUUUGAGGGUGGAACAUUAAAAUCU'
            'CCUAAGAUAAUAAUUCUAUCAUAAUUAGAAUAUAAAUUAUCAAUGAUGUCAUUUAAGUGAUCUAG'
            'AAAAAUAUUGAUAGUAACAGUUGGAUGUUUGUAUAUAGAAAUAGUAAGCCAUCUAUUUUUCCCAA'
            'AUGCGAGUUCAAAAACCAAAAUUGGAUUCCUUCAAAGAAAAAAGACAUUAAGAAACUUGAUGGAA'
            'UCCCUUCUCGACUGUAAACAAGCAGUCUCUGGGAUCC'))
    return fixture_return


@pytest.fixture
def cdna():
    """Return GFP cDNA Object"""
    from models import DNA
    fixture_return = DNA(
        name='GFP (M62654.1)',
        sequence=(
            'AAGCTTCAAATTAAGTCAGCTCCTTAAATGAAAGATAATAAAGTGTAGTTCAAGAACTATATGAA'
            'TGATGTGTTTTCAGATAACCAAAATGGGGAAAAACATGCTAAAGTCAGCATATTTTTGGAAAATT'
            'GATGACGTCATCATGACGTCGTTTTGATGACAAAACTTATTATAAGCGAATTCTTATATTTTTAC'
            'AGGATAACAAAGATGAGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATT'
            'AGATGGTGATGTTAATGGGCACAAATTCTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACG'
            'GAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAGCTACCTGTTCCATGGCCAACACTTGTC'
            'ACTACTTTCTCTTATGGTGTTCAGTAAGTGCATTTTATACTCTTTTAATATCAGTGTTAAGAAAA'
            'TCAAGTGTCTTGCTATTTTTTCGATTATTGGTGCAATTCTAGTCAAATTATTGCGTTTTTTTACC'
            'CAAAATGTTAATGTAAAACTGAAATTTGGCACACTTGCGCAAATATATACAGGGTATTTTGAAAA'
            'AATTAAACAGGATGATAAAAGTTGCACAGAAACTTATCTCAAGATTTACCCGCAGAAAGATGCTT'
            'NAAAAATTGATATTTGACAGAGCAAAACCTGAGATTCACGTCTTTTAGTTGTTTGACTTGAAATT'
            'TTGGTGACAGGTAGGTATCATGAAAAACAAACAAAACGTAAAAATATCACGTGATTAAAGTGTAT'
            'CTTACAGACCAGAAACAGTTTTATTAACTTCTATTATTCTATTTTGCAATATACACATTGTATCA'
            'ATTTCTTGAGTTACTCGAAGTAATACCGACCTATCATCAGAATTTCAAGTCAACACAACATTATA'
            'TGGGGCTGATTAGGGAATGATTTTGTCTCTTTTAGATGCTTTTCAAGATACCCAGATCATATGAA'
            'ACAGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTACA'
            'AAGATGACGGGAACTACAAATCACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTCGTTAATAGA'
            'ATTGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAAATGGAATACAA'
            'CTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCA'
            'AAATTGTATGTATACGTTAAGGGCATAAATTTTTGCGGGCATAAAATCTTGCGAAATTTATTATC'
            'GCGAATAGGTTACGCAAAATCTATAATTAAAATGTATTTTTTTCTGCTGATTTTCTAAATAACAA'
            'CTCAACCCGTCATTTTTATATCGCAAAAATAAATTCCGAAATAATTTATGCTCGCAAAAATTTAG'
            'GCCCATAAGTAGACTTTTGATATCTGCGTGCTCTGCAATGAAGTAAAAATACGATATTTTCATTG'
            'AAATACACGGGTTCAAAGTTATTTGTTAATTCAATAAGCGTGCGCAGAAATTAAAGGACGTATAA'
            'AGATACGAACACATCAAACCATTCATGCGTAAATAATGTTCTATTTTTAAAATTCACCAAAGCTT'
            'AAATATTCTTAAGAATTATTCATGTGCCATGGGAGCAACAATATAGTTATGGACAAAAATTTCTG'
            'AGTTCACTTTTATTTCTGCGCGCCCGCATCAAAGTTCAAACAACTGTGAACCCGAGTTTTTTCCA'
            'GCTTGCAATTTTAATAAGAGACAAAAAGCAAATTGCAGTTCAAGAAAATCGAGATATTGCCAGAT'
            'GTAAACATTTAATAAGAGACAAAAAGTTCATAAGCGTTCTAAAGAACAGCAACAAAATAATAATT'
            'AGAATTAAACGAGTTCTCAAACAAAATAAAAACTGAAGTCAAAGAGTCAGTAAGGAATTTAGTTA'
            'ACGATGCTTTATAATCAAAGTTTTAATTCCAGTTCATGTATGCAATTAACAATAAGATCTTGGAG'
            'AATTGAATATGTTTCGAAATTTTATAAATTCGGATTTAATTTCTAAAGTTGTGTATCAAAAATAG'
            'TTCAAACTATTTTCATGAAAAGATGATAAATTACGGTAATAAGTATATAATATAATCAATTAAAA'
            'TTAATTTTAGGCTCAAATTACAGAATCCACGTTTTTTTTCTCTAGACATAGCACAGTGTTTAGAT'
            'GTTTGTTTTATTTCATCCATCCTTATTACAGTTTTCCTCTGAACTTTAATACTAGCGTACAATTT'
            'GAATAATAATCTGAAATGATTCAACTTTTCAGAGACACAACATTGAAGATGGAAGCGTTCAACTA'
            'GCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTA'
            'CCTGTCCACACAATCTGCCCTTTCCAAAGATCCCAACGAAAAGAGAGATCACATGATCCTTCTTG'
            'AGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAATAAATGTCCAGACTT'
            'CCAATTGACACTAAAGTGTCCGAACAATTACTAAAATCTCAGGGTTCCTGGTTAAATTCAGGCTG'
            'AGATATTATTTATATATTTATAGATTCATTAAAATTTTATGAATAATTTATTGATGTTATTAATA'
            'GGGGTTATTTTCTTATTAAATAGGCTACTGGAGTGCATTCCTAATTCTATATTAATTACAATTTG'
            'ATTTGACTTGCTCAGAATCCCGCTTCATTGCTTTTCCACTTGCATTATCCTTATTTAGTATTAAT'
            'TTGTATTTTGGTTTGGCTACATTGAGTGCAAAAAACCTAATTTTCGGACGAATTTTCGAACGAAT'
            'TTTTTTGACGGAATTTTCTTCATTCTATTTACTCCTCTAGCTAAATTATTTTACCTTTTTGTTAA'
            'TTTGGTTAAATTATTCTCTGAGCCGATGATTGAGAAATTAATGGATTAAAAGTGAGTACCTTACA'
            'TGTTGTCAACTTGTAACGAATGGAAAAAGAAATTACGTTTCAAGAGTTTGAAAGGTAATACAGTT'
            'ACAGTTAACCGCAGAAAAATTGCATGATGATTGATAAATTCGATTTTTGTTATCCTAAAATTTTC'
            'CAAACGTCAGTGGCCGACGACTTTATCAGGGACTTCTAAAAGTGAAAAATAATCAGGTGCGGATT'
            'TCGAAGGCGCAAAACTATAGGAAGAGAGCGAAATGTCATTAAATTATCATATTCTATTAACTGAT'
            'GACAATAGATGATGAAAAGTTTATGATTATTCACTCTCCTCCTGTAATTATGCGACCCTTCTAGA'
            'TTCACGCCTGAAAGTATAGCTACCTGGGATGAAGTACTAGTCTGAGGACTCTTCACCTAAAAATT'
            'AAATTCTTATAAGAGTAAACAAGAAACTTAGCAGTTACAAACGGGAGAGCGATGAGAAACAAAAA'
            'CAATTACGTTGCCACTATGAATATCGATGTTCAATCAATTTTGTTCCTTACTTATAAGAACGAGA'
            'TCGTCTTAACTTAAAATAGTAAAATGTTATCAAGATAATAGCAATTTTTTACCGACACAGCGAAG'
            'ACTCACTACTGAAATGATCAGTTTTAATCAGGCAAATAATCCGTGGCACATAATAGTGACCGAAA'
            'ATAATTAATCGGCATTAAGACTACCGAAATAATAATGTTTTTTCTACTGCGTATACGCGTGAGAA'
            'ATTTTCAATAAGCTCATCATCTTCAGCATAGTTATACTTTTATGTAAAGTATCAATTCCGACATA'
            'AAATAACGGCTTATTATCGAAATAATAGCGTTTTCTCTACTCCATGCGCGTCAAAAGTTCTCTCT'
            'AGGCTCATCATCTTCAGCATAATTATAATTTTTGTAAAGTACCAGTTCCGGTCGAAAATAATGAC'
            'TAATTACCGAAATTATAGTGTTTTTCTATTGCCATGCGCGTGAAAAATTTTGATTGAATCATCAT'
            'CTTCAGCATAGGCATAATTCTTTGTAAAATATCGATTCCGACATAAAATAATGGCCTATTACCGA'
            'AATAATCGCGTTTTTCCTACTGCGCATGCGCGTCAAAAATTATATTTTTATTCATCATCTTCAGC'
            'ATAATTATATTTTTTTGTAAAGTACCAGTTCCGGTAGAAAATAATGACTTGTTACTGAAATAATA'
            'GCGTTTTTCTATTGCGCATGCGCTATAAAAATTAAAGTAACGTCATCATATTCAGCATGGTATTG'
            'AAATTTTCAAATTTAATTAACCTATTGAACAAGAATGTACACTTGCATCAAAATAGGTGAAATTC'
            'GCCAATATCGCTAAATGTGACGCGCGGGAGCAATACTACGCATGTAGCTTCAGGTAAAGCATGTA'
            'GAAACTCGGAGGAGTAGGAGTCCACCGTCGAAACTAAAACGGGATACACTACGCTATGGCCTTCG'
            'CTCTCCCGTAAAAAGGGACTAACAATACGACCTAATTGAAATACTAAAAAAAACAAGAGAAATTT'
            'AACCCCTTTGTTAACACTTTTCAAAAGTGGGATTTTTTAGCCAACCATCTGGTATATATGGTTGC'
            'TCATTTTATTATTATCTCTTTCTTTATTGTTGGTACAACGTAGTCAAAATACAAATTAGGTTAAT'
            'AAAAAGCAACATTATAATGTATAAAATCTAATTGTGTCTAATTACCGACAAATTTTACAGGAACA'
            'GTTTTCACCAGACCGAGTCTTAATTTTAGTTTTAAAAGAAATTATGTTTCTACTGTTCTGACAAT'
            'CTGAAGACAATTAGTTCTAGTGTAACAAT''GCTCTGAATTGAATATATTCAGCAATATTTTGTT'
            'TGTAAGAATTGGATGAATGTACGAACCTTCAGCAGATTTATACCAAGTGTTAGATTTAACAAGAT'
            'TTGCAAGCTGATGAGTTTCGAGAAAATTCAACATATCTGGATTTGAGGGTGGAACATTAAAATCT'
            'CCTAAGATAATAATTCTATCATAATTAGAATATAAATTATCAATGATGTCATTTAAGTGATCTAG'
            'AAAAATATTGATAGTAACAGTTGGATGTTTGTATATAGAAATAGTAAGCCATCTATTTTTCCCAA'
            'ATGCGAGTTCAAAAACCAAAATTGGATTCCTTCAAAGAAAAAAGACATTAAGAAACTTGATGGAA'
            'TCCCTTCTCGACTGTAAACAAGCAGTCTCTGGGATCC'))
    return fixture_return


@pytest.fixture
def cds():
    """Return GFP CDS object"""
    from models import CDS
    fixture_return = CDS(
        name='GFP (M62654.1:208-2523)',
        sequence=(
            'ATGAGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTT'
            'AATGGGCACAAATTCTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTT'
            'AAATTTATTTGCACTACTGGAAAGCTACCTGTTCCATGGCCAACACTTGTCACTACTTTCTCTTAT'
            'GGTGTTCAGTAAGTGCATTTTATACTCTTTTAATATCAGTGTTAAGAAAATCAAGTGTCTTGCTAT'
            'TTTTTCGATTATTGGTGCAATTCTAGTCAAATTATTGCGTTTTTTTACCCAAAATGTTAATGTAAA'
            'ACTGAAATTTGGCACACTTGCGCAAATATATACAGGGTATTTTGAAAAAATTAAACAGGATGATAA'
            'AAGTTGCACAGAAACTTATCTCAAGATTTACCCGCAGAAAGATGCTTNAAAAATTGATATTTGACA'
            'GAGCAAAACCTGAGATTCACGTCTTTTAGTTGTTTGACTTGAAATTTTGGTGACAGGTAGGTATCA'
            'TGAAAAACAAACAAAACGTAAAAATATCACGTGATTAAAGTGTATCTTACAGACCAGAAACAGTTT'
            'TATTAACTTCTATTATTCTATTTTGCAATATACACATTGTATCAATTTCTTGAGTTACTCGAAGTA'
            'ATACCGACCTATCATCAGAATTTCAAGTCAACACAACATTATATGGGGCTGATTAGGGAATGATTT'
            'TGTCTCTTTTAGATGCTTTTCAAGATACCCAGATCATATGAAACAGCATGACTTTTTCAAGAGTGC'
            'CATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTACAAAGATGACGGGAACTACAAATCACG'
            'TGCTGAAGTCAAGTTTGAAGGTGATACCCTCGTTAATAGAATTGAGTTAAAAGGTATTGATTTTAA'
            'AGAAGATGGAAACATTCTTGGACACAAAATGGAATACAACTATAACTCACACAATGTATACATCAT'
            'GGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTGTATGTATACGTTAAGGGCATAA'
            'ATTTTTGCGGGCATAAAATCTTGCGAAATTTATTATCGCGAATAGGTTACGCAAAATCTATAATTA'
            'AAATGTATTTTTTTCTGCTGATTTTCTAAATAACAACTCAACCCGTCATTTTTATATCGCAAAAAT'
            'AAATTCCGAAATAATTTATGCTCGCAAAAATTTAGGCCCATAAGTAGACTTTTGATATCTGCGTGC'
            'TCTGCAATGAAGTAAAAATACGATATTTTCATTGAAATACACGGGTTCAAAGTTATTTGTTAATTC'
            'AATAAGCGTGCGCAGAAATTAAAGGACGTATAAAGATACGAACACATCAAACCATTCATGCGTAAA'
            'TAATGTTCTATTTTTAAAATTCACCAAAGCTTAAATATTCTTAAGAATTATTCATGTGCCATGGGA'
            'GCAACAATATAGTTATGGACAAAAATTTCTGAGTTCACTTTTATTTCTGCGCGCCCGCATCAAAGT'
            'TCAAACAACTGTGAACCCGAGTTTTTTCCAGCTTGCAATTTTAATAAGAGACAAAAAGCAAATTGC'
            'AGTTCAAGAAAATCGAGATATTGCCAGATGTAAACATTTAATAAGAGACAAAAAGTTCATAAGCGT'
            'TCTAAAGAACAGCAACAAAATAATAATTAGAATTAAACGAGTTCTCAAACAAAATAAAAACTGAAG'
            'TCAAAGAGTCAGTAAGGAATTTAGTTAACGATGCTTTATAATCAAAGTTTTAATTCCAGTTCATGT'
            'ATGCAATTAACAATAAGATCTTGGAGAATTGAATATGTTTCGAAATTTTATAAATTCGGATTTAAT'
            'TTCTAAAGTTGTGTATCAAAAATAGTTCAAACTATTTTCATGAAAAGATGATAAATTACGGTAATA'
            'AGTATATAATATAATCAATTAAAATTAATTTTAGGCTCAAATTACAGAATCCACGTTTTTTTTCTC'
            'TAGACATAGCACAGTGTTTAGATGTTTGTTTTATTTCATCCATCCTTATTACAGTTTTCCTCTGAA'
            'CTTTAATACTAGCGTACAATTTGAATAATAATCTGAAATGATTCAACTTTTCAGAGACACAACATT'
            'GAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTC'
            'CTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCCAAAGATCCCAACGAAAAGAGA'
            'GATCACATGATCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATAC'
            'AAATAA'))
    return fixture_return


@pytest.fixture
def protein():
    """Return GFP Protein object"""
    from models import Protein
    fixture_return = Protein(
        name='GFP protein sequence (AAA27722.1)',
        sequence=(
            'MSKGEELFTGVVPILVELDGDVNGHKFSVSGEGEGDATYGKLTLKFICTTGKLPVPWPTLVTTFS'
            'YGVQCFSRYPDHMKQHDFFKSAMPEGYVQERTIFYKDDGNYKSRAEVKFEGDTLVNRIELKGIDF'
            'KEDGNILGHKMEYNYNSHNVYIMADKQKNGIKVNFKIRHNIEDGSVQLADHYQQNTPIGDGPVLL'
            'PDNHYLSTQSALSKDPNEKRDHMILLEFVTAAGITHGMDELYK'))
    return fixture_return


# TESTS -----------------------------------------------------------------------
@pytest.mark.parametrize('name,input_sequence', [
    ['dna', 'AGCTCTCTGTGGCAAGTCA'],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCN'],
    ['rna', 'AGCUCUCUGUGGCAAGUCA'],
    ['spaces', 'AGCTCT CTG  TGGCAA      GTCA'],
    ['newlines', '\nAGCTCT\nCTG\n\nTGGCAA\n\n\n\n\n\n\nGTCA'],
    ['dashes', 'AGCTCT-CTG--TGGCAA------GTCA'],
    ['underscores', 'AGCTCT_CTG__TGGCAA______GTCA'],
    ['whitespace', '      AGCTCTCTGTGGCAAGTCA      '],
    ['lowercase', 'agctctctgtggcaagtca'],])
def test_nucleotide__init__(name, input_sequence):
    """
    Tests that the nucleotide instantiation works under circumstances
    it is expected to be able to handle, and raises an appropriate error
    under all circumstances that should make it fail.
    """
    from models import Nucleotide
    assert isinstance(Nucleotide(input_sequence), Nucleotide)
    assert isinstance(Nucleotide(sequence=input_sequence), Nucleotide)
    assert isinstance(Nucleotide(input_sequence, name), Nucleotide)
    assert isinstance(Nucleotide(name=name, sequence=input_sequence), Nucleotide)
    assert isinstance(Nucleotide(sequence=input_sequence, name=name), Nucleotide)
    return


@pytest.mark.parametrize('name,pass_expected,input_sequence,result',[
    ['dna', True, 'AGCTCTCTGTGGCAAGTCA', 'AGCTCTCTGTGGCAAGTCA'],
    ['ambiguous_dna', True, 'RDBWYTSTGHVGMAAKTCN', 'RDBWYTSTGHVGMAAKTCN'],
    ['rna', True, 'AGCUCUCUGUGGCAAGUCA', 'AGCUCUCUGUGGCAAGUCA'],
    ['protein', False, 'ARNDCEQGHILKMFPSTWYV', ValueError],
    ['spaces', True, 'AGCTCT CTG  TGGCAA      GTCA', 'AGCTCTCTGTGGCAAGTCA'],
    ['newlines', True, '\nAGCTCT\nCTG\n\nTGGCAA\n\n\n\n\n\n\nGTCA', 'AGCTCTCTGTGGCAAGTCA'],
    ['dashes', True, 'AGCTCT-CTG--TGGCAA------GTCA', 'AGCTCTCTGTGGCAAGTCA'],
    ['underscores', True, 'AGCTCT_CTG__TGGCAA______GTCA', 'AGCTCTCTGTGGCAAGTCA'],
    ['whitespace', True, '      AGCTCTCTGTGGCAAGTCA      ', 'AGCTCTCTGTGGCAAGTCA'],
    ['lowercase', True, 'agctctctgtggcaagtca', 'AGCTCTCTGTGGCAAGTCA'],
    ['text', False, 'This is not a sequence', ValueError],])
def test_sequence_property(name, pass_expected, input_sequence, result):
    """
    Tests that the nucleotide sequence property works under circumstances
    it is expected to be able to handle, and raises an appropriate error
    under all circumstances that should make it fail.
    """
    if pass_expected:
        nucleotide = Nucleotide(name=name, sequence=input_sequence)
        assert nucleotide.sequence == result
    else:
        with pytest.raises(result):
            Nucleotide(name=name, sequence=input_sequence)


@pytest.mark.parametrize('name,input_sequence,result',[
    ['dna', 'AGCTCTCTGTGGCAAGTCA', 19],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCNACT', 22],
    ['rna', 'AGCUCUCUGUGGCAAG', 16],
    ['spaces', 'AGCTCT CTG  TGGCAA      GTCA', 19],
    ['newlines', '\nAGCTCT\nCTG\n\nTGGCAA\n\n\n\n\n\n\nGTCA', 19],
    ['dashes', 'AGCTCT-CTG--TGGCAA------GTCA', 19],
    ['underscores', 'AGCTCT_CTG__TGGCAA______GTCA', 19],
    ['whitespace', '      AGCTCTCTGTGGCAAGTCA      ', 19],
    ['lowercase', 'agctctctgtggcaagtca', 19],])
def test_length_property(name, input_sequence, result):
    """
    Tests that the nucleotide length property works under circumstances
    it is expected to be able to handle, and raises an appropriate error
    under all circumstances that should make it fail.
    """
    nucleotide = Nucleotide(name=name, sequence=input_sequence)
    assert nucleotide.length == result


@pytest.mark.parametrize('name,input_sequence,result',[
    ['dna', 'AGCTCTCTGTGGCAAGTCA', 52.63],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCNACT', 43.18],
    ['rna', 'AGCUCUCUGUGGCAAG', 56.25],])
def test_gc_content_property(name, input_sequence, result):
    """
    Tests that the nucleotide gc_content property works under circumstances
    it is expected to be able to handle, and raises an appropriate error
    under all circumstances that should make it fail.
    """
    nucleotide = Nucleotide(name=name, sequence=input_sequence)
    assert nucleotide.gc_content == result


@pytest.mark.parametrize('name,input_sequence,result',[
    ['dna', 'AGCTCTCTGTGGCAAGTCA', 'ACTGAACGGTGTCTCTCGA'],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCNACT', 'TCANCTKAAMGVHGTSTYWBDR'],
    ['rna', 'AGCUCUCUGUGGCAAG', 'GAACGGUGUCUCUCGA'],])
def test_reverse_method(name, input_sequence, result):
    """
    Tests that the nucleotide `reverse` method works under circumstances
    it is expected to be able to handle, and raises an appropriate error
    under all circumstances that should make it fail.
    """
    nucleotide = Nucleotide(name=name, sequence=input_sequence)
    assert nucleotide.reverse() == result


@pytest.mark.parametrize('name,input_sequence,result',[
    ['dna', 'AGCTCTCTGTGGCAAGTCA', 'TCGAGAGACACCGTTCAGT'],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCNACT', 'YHVWRASACDBCKTTMAGNTGA'],
    ['rna', 'AGCUCUCUGUGGCAAG', 'UCGAGAGACACCGUUC'],])
def test_complement_property(name, input_sequence, result):
    """
    Tests that the nucleotide `complement` property works under circumstances
    it is expected to be able to handle, and raises an appropriate error
    under all circumstances that should make it fail.
    """
    nucleotide = Nucleotide(name=name, sequence=input_sequence)
    assert nucleotide.complement == result


@pytest.mark.parametrize('name,input_sequence,result',[
    ['dna', 'AGCTCTCTGTGGCAAGTCA', 'TGACTTGCCACAGAGAGCT'],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCNACT', 'AGTNGAMTTKCBDCASARWVHY', ],
    ['rna', 'AGCUCUCUGUGGCAAG', 'CUUGCCACAGAGAGCU'],])
def test_reverse_complement_property(name, input_sequence, result):
    """
    Tests that the nucleotide `reverse_complement` property works under
    circumstances it is expected to be able to handle, and raises an
    appropriate error under all circumstances that should make it fail.
    """
    nucleotide = Nucleotide(name=name, sequence=input_sequence)
    assert nucleotide.reverse_complement == result


@pytest.mark.parametrize('name,input_sequence,result',[
    ['dna', 'AGCTCTCTGTGGCAAGTCA', 'TGACTTGCCACAGAGAGCT'],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCNACT', 'AGTNGAMTTKCBDCASARWVHY', ],
    ['rna', 'AGCUCUCUGUGGCAAG', 'CUUGCCACAGAGAGCU'],])
def test_flip_sequence_method(name, input_sequence, result):
    """
    Tests that the nucleotide `reverse` method works under circumstances
    it is expected to be able to handle, and raises an appropriate error
    under all circumstances that should make it fail.
    """
    nucleotide = Nucleotide(name=name, sequence=input_sequence)
    nucleotide.flip_sequence()
    assert nucleotide.sequence == result


@pytest.mark.parametrize('name,input_sequence,result',[
    ['dna', 'AGCTCTCTGTGGCAAGTCA', False],
    ['ambiguous_dna', 'RDBWYTSTGHVGMAAKTCNACT', True],
    ['rna', 'AGCUCUCUGUGGCAAG', False],])
def test_contains_ambiguity_method(name, input_sequence, result):
    """
    Tests that the nucleotide `contains_ambiguity` method works under
    circumstances it is expected to be able to handle, and raises an
    appropriate error under all circumstances that should make it fail.
    """
    nucleotide = Nucleotide(name=name, sequence=input_sequence)
    assert nucleotide.contains_ambiguity() == result
