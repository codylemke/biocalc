"""Pytest functions for the primer model

Description...

Usage Example:
    ...example
"""
# Third Party Packages
import pytest
# Local Modules
from models import Primer, Construct


# FIXTURES --------------------------------------------------------------------
@pytest.fixture
def pEV():
    """Placeholder"""
    return Construct(
        name='pEV',
        sequence=(
            'CGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCCCCTCAGCGATATCAGGAATGTCTTCG'
            'AAAGTGAAACGTGATTTCATGCGTCATTTTGAACATTTTGTAAATCTTATTTAATAATGTG'
            'TGCGGCAATTCACATTTAATTTATGAATGTTTTCTTAACATCGCGGCAACTCAAGAAACGG'
            'CAGGTTCGGATCTTAGCTACTAGAGAAAGAGGAGAAATACTAGATGCGTAAAGGCGAAGAG'
            'CTGTTCACTGGTGTCGTCCCTATTCTGGTGGAACTGGATGGTGATGTCAACGGTCATAAGT'
            'TTTCCGTGCGTGGCGAGGGTGAAGGTGACGCAACTAATGGTAAACTGACGCTGAAGTTCAT'
            'CTGTACTACTGGTAAACTGCCGGTTCCTTGGCCGACTCTGGTAACGACGCTGACTTATGGT'
            'GTTCAGTGCTTTGCTCGTTATCCGGACCATATGAAGCAGCATGACTTCTTCAAGTCCGCCA'
            'TGCCGGAAGGCTATGTGCAGGAACGCACGATTTCCTTTAAGGATGACGGCACGTACAAAAC'
            'GCGTGCGGAAGTGAAATTTGAAGGCGATACCCTGGTAAACCGCATTGAGCTGAAAGGCATT'
            'GACTTTAAAGAGGACGGCAATATCCTGGGCCATAAGCTGGAATACAATTTTAACAGCCACA'
            'ATGTTTACATCACCGCCGATAAACAAAAAAATGGCATTAAAGCGAATTTTAAAATTCGCCA'
            'CAACGTGGAGGATGGCAGCGTGCAGCTGGCTGATCACTACCAGCAAAACACTCCAATCGGT'
            'GATGGTCCTGTTCTGCTGCCAGACAATCACTATCTGAGCACGCAAAGCGTTCTGTCTAAAG'
            'ATCCGAACGAGAAACGCGATCATATGGTTCTGCTGGAGTTCGTAACCGCAGCGGGCATCAC'
            'GCATGGTATGGATGAACTGTACAAATGACCAGGCATCAAATAAAACGAAAGGCTCAGTCGA'
            'AAGACTGGGCCTTTCGTTTTATCTGTTGTTTGTCGGTGAACGCTCTCTACTAGAGTCACAC'
            'TGGCTCACCTTCGGGTGGGCCTTTCTGCGTTTATAGAAGACATAAAAGATATCTGATACGC'
            'CTATTTTTATAGGTTAATGTCATGATAATAATGGTTTCTTAGACGTCAGGTGGCACTTTTC'
            'GGGGAAATGTGCGCGGAACCCCTATTTGTTTATTTTTCTAAATACATTCAAATATGTATCC'
            'GCTCATGAGACAATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAGTATGAGT'
            'ATTCAACATTTCCGTGTCGCCCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTG'
            'CTCACCCAGAAACGCTGGTGAAAGTAAAAGATGCTGAAGATCAGTTGGGTGCACGAGTGGG'
            'TTACATCGAACTGGATCTCAACAGCGGTAAGATCCTTGAGAGTTTTCGCCCCGAAGAACGT'
            'TTTCCAATGATGAGCACTTTTAAAGTTCTGCTATGTGGCGCGGTATTATCCCGTATTGACG'
            'CCGGGCAAGAGCAACTCGGTCGCCGCATACACTATTCTCAGAATGACTTGGTTGAGTACTC'
            'ACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAAGAGAATTATGCAGTGCTGCC'
            'ATAACCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGGAGGACCGAAGG'
            'AGCTAACCGCTTTTTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAACC'
            'GGAGCTGAATGAAGCCATACCAAACGACGAGCGTGACACCACGATGCCTGTAGCAATGGCA'
            'ACAACGTTGCGCAAACTATTAACTGGCGAACTACTTACTCTAGCTTCCCGGCAACAATTAA'
            'TAGACTGGATGGAGGCGGATAAAGTTGCAGGACCACTTCTGCGCTCGGCCCTTCCGGCTGG'
            'CTGGTTTATTGCTGATAAATCTGGAGCCGGTGAGCGTGGGTCGCGCGGTATCATTGCAGCA'
            'CTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAGTTATCTACACGACGGGGAGTCAGGCAA'
            'CTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTCACTGATTAAGCATTGGTA'
            'ACTGTCAGACCAAGTTTACTCATATATACTTATGCAGTTTAAGGTTTACACCTATAAAAGA'
            'GAGAGCCGTTATCGTCTGTTTGTGGATGTACAGAGTGATATTATTGACACGCCCGGGCGAC'
            'GGATGGTGATCCCCCTGGCCAGTGCACGTCTGCTGTCAGATAAAGTCTCCCGTGAACTTTA'
            'CCCGGTGGTGCATATCGGGGATGAAAGCTGGCGCATGATGACCACCGATATGGCCAGTGTG'
            'CCGGTATCCGTTATCGGGGAAGAAGTGGCTGATCTCAGCCACCGCGAAAATGACATCAAAA'
            'ACGCCATTAACCTGATGTTCTGGGGAATATAATAGATTGATTTAAAACTTCATTTTTAATT'
            'TAAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAG'
            'TTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTT'
            'TTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTG'
            'TTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAG'
            'ATACCAAATACTGTTCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAG'
            'CACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAA'
            'GTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGC'
            'TGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGAT'
            'ACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTA'
            'TCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCC'
            'TGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGAT'
            'GCTCGTCAGGGGGGCGGAGCCTGTGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCT'
            'GGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGAT'
            'AACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAA'))


# TESTS -----------------------------------------------------------------------
@pytest.mark.parametrize('name,input_sequence', [
    ['dna', 'AGCTCTCTGTGGCAAGTCA'],])
def test_primer__init__(name, input_sequence):
    """
    Tests that the primer instantiation works under circumstances it is
    expected to be able to handle, and raises an appropriate error under all
    circumstances that should make it fail.
    """
    assert isinstance(Primer(input_sequence), Primer)
    assert isinstance(Primer(sequence=input_sequence), Primer)
    assert isinstance(Primer(input_sequence, name), Primer)
    assert isinstance(Primer(name=name, sequence=input_sequence), Primer)
    assert isinstance(Primer(sequence=input_sequence, name=name), Primer)
    return

@pytest.mark.parametrize('name,input_sequence,template,expected_return', [
    ['pEV_F', 'CGCAGCGAGTCAGTGAG', pEV, ''],])

# @pytest.mark.parametrize('name,input_sequence,template,expected_return', [
#     ['amplification_primer', '', pEV, ''],
#     ['sequencing_primer', 'CGCAGCGAGTCAGTGAG', pEV, ''],
#     ['extension_primer', 'CATAAAAAGAGACCGATATCTGATACGCCTATTTTTATAGGTTAATGTC', pEV, ''],
#     ['mutagenesis_substitution_primer', '', pEV, ''],
#     ['mutagenesis_insertion_primer', '', pEV, ''],
#     ['mutagenesis_deletion_primer', '', pEV, ''],])
# def test_anneal(name, input_sequence, template, expected_return):
#     """
#     Tests that the primer anneal method works under circumstances it is
#     expected to be able to handle, and raises an appropriate error under all
#     circumstances that should make it fail.
#     """
#     assert Primer(name=name, sequence=input_sequence).anneal(template) == expected_return
